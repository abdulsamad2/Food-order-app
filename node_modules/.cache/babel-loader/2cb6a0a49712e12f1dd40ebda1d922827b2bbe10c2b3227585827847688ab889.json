{"ast":null,"code":"var _jsxFileName = \"/home/absamad/React-Projects/Food order app/src/store/CartProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-contenxt\";\n\n// Initial state of the cart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cartInitialState = {\n  items: [],\n  totalAmount: 0\n};\n\n// Reducer function to manage state updates based on actions\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    // Check if the item already exists in the cart\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n    if (existingCartItem) {\n      // Item already exists in the cart, update its amount\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n    } else {\n      // Item is not in the cart, add it as a new entry\n      updatedItems = [...state.items, action.item];\n    }\n    // Return updated state with the new item or updated item amount\n    return {\n      totalAmount: state.totalAmount + action.item.price * action.item.amount,\n      items: updatedItems\n    };\n  }\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    // Check if the item exists in the cart\n    if (existingCartItem) {\n      let updatedItems;\n      let updatedTotalAmount;\n      if (existingCartItem.amount === 1) {\n        // If there's only one of this item, remove it from the cart\n        updatedItems = state.items.filter(item => item.id !== action.id);\n        updatedTotalAmount = state.totalAmount - existingCartItem.price;\n      } else {\n        // If there are multiple items, decrease the amount of the specified item by 1\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = {\n          ...existingCartItem,\n          amount: existingCartItem.amount - 1\n        };\n        updatedTotalAmount = state.totalAmount - existingCartItem.price;\n      }\n      return {\n        ...state,\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    }\n  }\n  // If the action type doesn't match any known action, return the initial state\n  return cartInitialState;\n};\nconst CartProvider = props => {\n  _s();\n  // Use the reducer hook to manage the cart state and dispatch actions\n  const [cartState, cartDispatch] = useReducer(cartReducer, cartInitialState);\n\n  // Handler function to add an item to the cart\n  const addItemtoCartHandler = item => {\n    cartDispatch({\n      type: \"ADD\",\n      item\n    });\n  };\n\n  // Handler function to remove an item from the cart\n  const removeItemFromCartHandler = id => {\n    cartDispatch({\n      type: \"REMOVE\",\n      id\n    });\n  };\n\n  // Prepare the cart context with necessary data and functions to be consumed by components\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemtoCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n\n  // Provide the cart context to components within this context provider\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"xwsFH1oQpXIFfWfcF3otaWzplDM=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","jsxDEV","_jsxDEV","cartInitialState","items","totalAmount","cartReducer","state","action","type","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItems","amount","price","updatedTotalAmount","filter","CartProvider","props","_s","cartState","cartDispatch","addItemtoCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/absamad/React-Projects/Food order app/src/store/CartProvider.js"],"sourcesContent":["import React, { useReducer } from \"react\";\nimport CartContext from \"./cart-contenxt\";\n\n// Initial state of the cart\nconst cartInitialState = {\n  items: [],\n  totalAmount: 0,\n};\n\n// Reducer function to manage state updates based on actions\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    // Check if the item already exists in the cart\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id,\n    );\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n    if (existingCartItem) {\n      // Item already exists in the cart, update its amount\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      };\n    } else {\n      // Item is not in the cart, add it as a new entry\n      updatedItems = [...state.items, action.item];\n    }\n    // Return updated state with the new item or updated item amount\n    return {\n      totalAmount: state.totalAmount + action.item.price * action.item.amount,\n      items: updatedItems,\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.id,\n    );\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    // Check if the item exists in the cart\n    if (existingCartItem) {\n      let updatedItems;\n      let updatedTotalAmount;\n\n      if (existingCartItem.amount === 1) {\n        // If there's only one of this item, remove it from the cart\n        updatedItems = state.items.filter((item) => item.id !== action.id);\n        updatedTotalAmount = state.totalAmount - existingCartItem.price;\n      } else {\n        // If there are multiple items, decrease the amount of the specified item by 1\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = {\n          ...existingCartItem,\n          amount: existingCartItem.amount - 1,\n        };\n        updatedTotalAmount = state.totalAmount - existingCartItem.price;\n      }\n\n      return {\n        ...state,\n        items: updatedItems,\n        totalAmount: updatedTotalAmount,\n      };\n    }\n  }\n  // If the action type doesn't match any known action, return the initial state\n  return cartInitialState;\n};\n\nconst CartProvider = (props) => {\n  // Use the reducer hook to manage the cart state and dispatch actions\n  const [cartState, cartDispatch] = useReducer(cartReducer, cartInitialState);\n\n  // Handler function to add an item to the cart\n  const addItemtoCartHandler = (item) => {\n    cartDispatch({\n      type: \"ADD\",\n      item,\n    });\n  };\n\n  // Handler function to remove an item from the cart\n  const removeItemFromCartHandler = (id) => {\n    cartDispatch({\n      type: \"REMOVE\",\n      id,\n    });\n  };\n\n  // Prepare the cart context with necessary data and functions to be consumed by components\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemtoCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  // Provide the cart context to components within this context provider\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}